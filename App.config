<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="GroupElementsSection" type="TestLibrary.Config.GroupElementsSection, TestLibrary" />
    <section name="TestElementsSection" type="TestLibrary.Config.TestElementsSection, TestLibrary" />
  </configSections>
  <appSettings>
    <!-- Standard ABTTestLibApp Logger configuation settings, specific to the Logger sub-system.-->
    <add key="LOGGER_FileEnabled" value="true" />
    <!-- LOGGER_FileEnabled & LOGGER_SQLEnabled are independent of each other. -->
    <!-- Can choose to Log to Text only, SQL only, both Text & SQL or neither, depending what the Customer requires. -->
    <add key="LOGGER_FilePath" value="LOGGER_FilePath" />
    <!-- Text Log Paths are only relevant if LOGGER_FileEnabled is true. -->
    <add key="LOGGER_SQLEnabled" value="false" />
    <!-- LOGGER_FileEnabled & LOGGER_SQLEnabled are independent of each other. -->
    <!-- Can choose to Log to Text only, SQL only, both Text & SQL or neither, depending what the Customer requires. -->
    <add key="LOGGER_SQLConnectionString" value="" />
    <!--  SQL connection string only relevant if LOGGER_SQLEnabled is true. -->
    <add key="LOGGER_TestEventsEnabled" value="true" />
    <!-- See https://github.com/Amphenol-Borisch-Technologies/TestEvents -->
    <add key="LOGGER_TestEventsEnabled" value="true" />
    <!-- See https://github.com/Amphenol-Borisch-Technologies/TestEvents -->
    <!-- Standard ABTTestLibApp UUT configuration settings, specific to the Unit Under Test. -->
    <add key="UUT_Customer" value="UUT_Customer" />
    <add key="UUT_Type" value="UUT_Type" />
    <!-- Recommended choices: { System, Unit, CCA, Component }. -->
    <add key="UUT_Number" value="UUT_Number" />
    <add key="UUT_Revision" value="UUT_Revision" />
    <add key="UUT_Description" value="UUT_Description" />
    <add key="UUT_TestSpecification" value="UUT_TestSpecification" />
    <!-- When UUT_DocumentationFolder is a valid Windows folder path, File explorer will open the folder during TestLibrary.Form's Shown Event. -->
    <!-- Provides convenient access to supplementary UUT or test documents that may be helpful when operating the test. -->
    <!-- Examples are UUT test procedures, schematics, drawings, BOMs, work instructions, troubleshooting notes, etc. -->
    <!-- Set UUT_DocumentationFolder to empty string "" to disable it's function. -->
    <add key="UUT_DocumentationFolder" value="UUT_DocumentationFolder" />
    <!-- Custom configuration settings specific to this APP, LOG or UUT, and not provided by their standard configurations from TestLibrary. -->
    <!-- These settings should be initialized in a local library specific to the test program/application. -->
    <add key="CUSTOM_SMBusAddress" value="40" />
    <!-- System Management Bus device address, in hexadecimal format. -->
  </appSettings>
  <GroupElementsSection>
    <!--
	ID:			Required field.
				- Unique Identifier; no 2 can be identical, as ID is unique key in a Dictionary object.
				- Suggest T-10, T-20, T-30... ABT FilePro Traveler Test Operations.
	Required:	Required field.
				- If Required = true, it's a Group of Tests the UUT's customer requires
					be executed & pass in order to ship the UUT.
				- Required Groups generally correspond to FilePro Traveler
					operations; T-10, T-20, T-30...
				- Multiple Groups can be required, if there are multiple
					FilePro Test Operations; T-10, T-20, T-30...
				- If Required = false, Group is a custom subset of Tests
					solely useful for troubleshooting UUTs that don't pass
					their Required Groups.
				- Non-required Groups don't create valid test data nor report
					overall UUT results, just their custom Group results.
				- Recommend ordering all Required Groups by Test Operation,
					then non-Required as desired.
				- Order of Group appearance in this App.config determines order of
					appearance when selecting Groups in GroupSelection ListView,
					so optimally order them in the sequence they're performed;
				    (T-10, T-20, T-30...)
	Revision:	Required field.
				- Revision of the Test Group's GroupElement.
				- Increment whenever any GroupElement field in Group changes; particularly when TestIDs are added or removed.
				- Add a comment to the GroupElement for each revision increment detailing modifications.
				  providing revision history
				- Essentially GroupElements are customer test requirements, hence Revision is a required field.
	Summary:	Required field.
				- Concise description of Group; "PowerUp performs all power application/measurement tests."
	Detail:-	Optional field.
				- Optional verbose description of Group:
				- "PowerUp:
					* Apply/measure +28.0 VDC.
					* Apply/measure +5.0 VDC.
					* Apply/measure +3.3 VDC.
					* Measure derived ±12.0 VDC
					* Measure derived +2.5 VDC
					* Measure derived +1.8 VDC
					* Measure derived +1.2 VDC"
	TestIDs:	Required field.
				- Tests in Group, *in order of execution*
				- 1 or more TestIDs from TestElements, separated by '|'.
				- Tests execute in *entry order*:
					- Entry "T03|T01|T02" executed in sequence (T03, T01, T02).
					- Entry "T01|T02|T03" executed in sequence (T01, T02, T03).
					- Entry "T02|T03|T01" executed in sequence (T02, T03, T01).

	-->
    <GroupElements>
      <GroupElement ID="ID0" Revision="Revision0" Required="false" Summary="Summary0" Detail="Detail0" TestIDs="ID0" />
      <GroupElement ID="ID1" Revision="Revision1" Required="true" Summary="Summary1" Detail="Detail1" TestIDs="ID0|ID1" />
      <GroupElement ID="ID2" Revision="Revision2" Required="true" Summary="Summary2" Detail="Detail2" TestIDs="ID0|ID1|ID2" />
      <!-- Spaces are permitted in GroupElement fields. -->
      <!-- GroupElement Revisions 1.0 are initial releases. -->
    </GroupElements>
  </GroupElementsSection>
  <TestElementsSection>
    <!--
	ID:			Required field.
				- Unique Identifier; no 2 can be identical, as ID is unique key in a Dictionary object.
				- T01, T02, T03...
				- *Must* also be a valid C# identifier; see 
				  https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/identifier-names.
				- Recommend alpha-numerically ordering to avoid duplications,
				  which throw Exceptions.
				- Can be ordered as desired though; test execution order
				  *solely* determined by GroupElement TestIDs test ordering.
				- Cannot contain | character.
					- Using character '|' to separate GroupsToTestsElement IDTests.
					- Thus TestElement IDs cannot contain character '|' in them.
					- ID="T01 valid.
					- ID="Test|001" invalid
	Revision:	Required field.
				- Revision of the Test's TestElement.
				- Increment whenever any TestElement field in Test changes; particularly
				  when LimitLow or LimitHigh are modified.
					- Typically will be set to "1.0" at initial release & left unchanged 
					  thereafter.
					- For most Customers & UUTs, this fine-grained revisioning will
					  be annoying, unnecessary overhead.
					- For some Customers or UUTs, however, it might be useful or even required.
				- Add a comment to the TestElement for each revision increment detailing modifications,
				  providing revision history
				- TestElements are customer test requirements, hence Revision is a required field.
	Summary:	Required field.
				- Concise description of Test; "Apply/measure +5V DC Input Voltage pre-programming."
	Detail:		Optional field.
				- Optional verbose description of Test:
				"Powerup:
					* Limit current to 0.75 Amps.
					* Measure voltage after 2.0 seconds delay.
					* Perform test before U6 µController and U7 EEPROM are programmed."
	LimitLow:	Required field, with caveats; see Invalid & Valid Tests below.
				- Test's low limit; example "4.75", for a 5.0VDC power supply with -5% tolerance.
				- Parsed as Double.TryParse(LimitLow, NumberStyles.Float, CultureInfo.CurrentCulture, out dMeasurement);
				- https://learn.microsoft.com/en-us/dotnet/api/system.double.tryparse?view=net-7.0#system-double-tryparse(system-string-system-globalization-numberstyles-system-iformatprovider-system-double
				- https://learn.microsoft.com/en-us/dotnet/api/system.globalization.numberstyles?view=net-7.0#system-globalization-numberstyles-float
				- Scientific Notation allowed & encouraged:
					- 1.0E5 is valid instead of 100000.0.
					- 1.5E-5 is valid instead of 0.000015.
					- Postive/Negative +/- signs allowed in both exponent & significand:
					+1.0E+5 is valid for +100000.0.
						- Recommend 1.0E5 though.
					-1.0E5 is valid for -1000000.0.
					1.5E-5 is valid for 0.000015.
					-1.5E-5 is valid for -0.000015.
				- Int32 & Double both allowed:
					- 100000 & 100000.0 both valid.
				- Commas not allowed:
					- 100000 & 1000000 both valid.
					- 100,000 & 1,000,000 both invalid.
					- Recommend 1E5 and 1E6 instead.
	LimitHigh:	Required field, with caveats; see Invalid & Valid Tests below.
				- Test's high limit; example "5.25", for a 5.0VDC power supply with +5% tolerance.
				- Parsed identically as LimitLow.
	Units		Optional field.
				- SI Base & Derived Units:
					- Examples: A, V, F, H, Ω, S, °C, s, Hz, W, VA for respectively
					amperes, volts, farads, henries, ohms, siemens,
					°Celcius, seconds, hertz, watts, volt-amperes.
					https://en.wikipedia.org/wiki/SI_base_unit
					https://en.wikipedia.org/wiki/SI_derived_unit
					- Recommend "" when Units aren't applicable:
					- NOTE: do not use Metric prefixes:
						- That is, do not use micro, milli, kilo, mega, etc.
						  or their μ, m, k, M, etc. symbols either.
						- Instead, always normalize LimitLow & LimitHigh to
						  unitary SI Units without prefixes.
						- 10000 Ω is valid.
						- 10 kiloΩ or 10 kΩ invalid.
						- Again, recommend Scientific Notation when applicable.
					- NOTE: Units are purely cosmetic in function; they aren't used
					  to calculate Test PASS/FAIL results as LimitLow & LimitHigh are,
					  only for reporting what Units their Test's measured values are in.
	UnitType	Optional field.
				- Recommend "" when UnitTypes aren't applicable:
				- Examples; AC, DC, Peak, PP, RMS respectively for Alternating Current,
				Direct Current, Peak, Peak-to-Peak, Root-Mean-Squared.
				- NOTE: UnitTypes are purely cosmetic in function; they aren't used
					to calculate Test PASS/FAIL results as LimitLow & LimitHigh are,
					only for reporting metadata about the Units the tests measured
					values are in.

	And now, for the LimitLow & LimitHigh caveats:
	Invalid Tests:
		- LimitLow = LimitHigh = String.Empty.
		- LimitLow = String.Empty,	LimitHigh ≠ String.Empty, but won't parse to Double.
		- LimitHigh = String.Empty, LimitLow  ≠ String.Empty, but won't parse to Double.
		- LimitLow ≠ String.Empty,	LimitHigh ≠ String.Empty, neither parse to Double, & LimitLow ≠ LimitHigh.
		- LimitLow > LimitHigh & both parse to Double.

	Valid Tests:
		- LimitLow < LimitHigh & both parse to Double:
			- Typical low & high limits, including a range of passing numeric measurements.
		- LimitLow = LimitHigh & both parse to Double:
			- This simply means only the specific exact measurement passes.
			- *Not recommended* due to potential roundoff when parsing String Limits & instrument measurement inaccuracies.
			- Most (all) real-world measurements require non-zero tolerances.
		- LimitLow parses to Double, LimitHigh = String.Empty:
			- Only low limit, no high.
			- HiPot passes if ≥ 1E6 Ω.
		- LimitLow = String.Empty, LimitHigh parses to Double:
			- No low limit, only high.
			- Continuities pass if ≤ 5 Ω.
		- LimitLow = LimitHigh, both ≠ String.Empty, & neither parse to Double:
			- This is to verify specific checksums or CRCs, or to read specific non-numeric String contents from memory or a file, parse operator input, etc.
		- LimitLow = LimitHigh = "CUSTOM":
			- If multiple permissable results are required, say any String in the set {"Alpha", "Beta", "Gamma", "Delta", "Epsilon"} must pass:
			- Or multiple numeric ranges required, say any TTL Voltage V where (0 ≤ V ≤ 0.8) && (2.0 ≤ V ≤ 5.0):
				- Set both LimitLow & LimitHigh to "CUSTOM".
				- Write custom code in your Test method to evaluate the Test's measurement:
					- If in the set {"Alpha", "Beta", "Gamma", "Delta", "Epsilon"}
					- Or (0 ≤ V ≤ 0.8) && (2.0 ≤ V ≤ 5.0)
					- Then return EventCodes.PASS from your method, else return EventCodes.FAIL.
					- Or return any valid EventCode as applicable; e.g. EventCodes.CANCEL, EventCodes.ERROR or EventCodes.UNSET.
			- Finally, write custom code in your Test method to log the results in detail directly, using Serilog's Log.Information() method
			  rather than TestLibrary's default LogTasks.LogTest() method invoked from its Run() method.
				- Permits multiple measurements or operations to be performed & logged in a single Test, but with a *single* overall result.
				- Tradeoff is LimitLow/LimitHigh aren't defined or modifiable from this App.config file, only defined/modifiable in the Test's method.
		-->
    <TestElements>
      <TestElement ID="ID0" Revision="Revision0" Summary="Summary0" Detail="Detail0" LimitLow="" LimitHigh="" Units="Units0" UnitType="UnitType0" />
      <TestElement ID="ID1" Revision="Revision1" Summary="Summary1" Detail="Detail1" LimitLow="" LimitHigh="LimitHigh" Units="Units1" UnitType="UnitType1" />
      <TestElement ID="ID2" Revision="Revision2" Summary="Summary2" Detail="Detail2" LimitLow="LimitLow" LimitHigh="" Units="Units2" UnitType="UnitType2" />
      <TestElement ID="ID3" Revision="Revision3" Summary="Summary3" Detail="Detail3" LimitLow="LimitLow" LimitHigh="LimitHigh" Units="Units3" UnitType="UnitType3" />
      <TestElement ID="ID4" Revision="Revision4" Summary="Summary4" Detail="Detail4" LimitLow="0" LimitHigh="1" Units="Units4" UnitType="UnitType4" />
      <TestElement ID="ID5" Revision="Revision5" Summary="Summary5" Detail="Detail5" LimitLow="1" LimitHigh="0" Units="Units5" UnitType="UnitType5" />
      <TestElement ID="ID6" Revision="Revision6" Summary="Summary6" Detail="Detail6" LimitLow="1" LimitHigh="1" Units="Units6" UnitType="UnitType6" />
      <TestElement ID="ID7" Revision="Revision7" Summary="Summary7" Detail="Detail7" LimitLow="0" LimitHigh="" Units="Units7" UnitType="UnitType7" />
      <TestElement ID="ID8" Revision="Revision8" Summary="Summary8" Detail="Detail8" LimitLow="" LimitHigh="1" Units="Units8" UnitType="UnitType8" />
      <TestElement ID="ID9" Revision="Revision9" Summary="Summary9" Detail="Detail9" LimitLow="Limit" LimitHigh="Limit" Units="" UnitType="UnitType9" />
      <TestElement ID="ID10" Revision="Revision10" Summary="Summary10" Detail="Detail10" LimitLow="CUSTOM" LimitHigh="CUSTOM" Units="Units10" UnitType="UnitType10" />
      <!-- TestElement Revisions 1.0 are initial releases. -->
    </TestElements>
  </TestElementsSection>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.IdentityModel.Abstractions" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-6.25.1.0" newVersion="6.25.1.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Identity.Client" publicKeyToken="0a613f4dd989e8ae" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.48.1.0" newVersion="4.48.1.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Runtime.CompilerServices.Unsafe" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-6.0.0.0" newVersion="6.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Memory" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.0.1.2" newVersion="4.0.1.2" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Buffers" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.0.3.0" newVersion="4.0.3.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Text.Encodings.Web" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.ValueTuple" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-4.0.3.0" newVersion="4.0.3.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Bcl.AsyncInterfaces" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Text.Json" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-7.0.0.1" newVersion="7.0.0.1" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Azure.Core" publicKeyToken="92742159e12e44c8" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-1.26.0.0" newVersion="1.26.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Azure.Identity" publicKeyToken="92742159e12e44c8" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-1.8.0.0" newVersion="1.8.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.IdentityModel.Protocols.OpenIdConnect" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-6.25.1.0" newVersion="6.25.1.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.IdentityModel.Protocols" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-6.25.1.0" newVersion="6.25.1.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.IdentityModel.Tokens" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-6.25.1.0" newVersion="6.25.1.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.IdentityModel.Tokens.Jwt" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-6.25.1.0" newVersion="6.25.1.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.IdentityModel.JsonWebTokens" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-6.25.1.0" newVersion="6.25.1.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.IdentityModel.Logging" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-6.25.1.0" newVersion="6.25.1.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Extensions.Configuration.Abstractions" publicKeyToken="adb9793829ddae60" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Extensions.Configuration.Binder" publicKeyToken="adb9793829ddae60" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-7.0.0.1" newVersion="7.0.0.1" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Memory.Data" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Diagnostics.DiagnosticSource" publicKeyToken="cc7b13ffcd2ddd51" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Identity.Client.Extensions.Msal" publicKeyToken="0a613f4dd989e8ae" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-2.25.0.0" newVersion="2.25.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Security.Cryptography.ProtectedData" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="NuGet.Frameworks" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-5.11.3.1" newVersion="5.11.3.1" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Ivi.Driver" publicKeyToken="a128c98f1d7717c1" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-1.5.0.0" newVersion="1.5.0.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.8" />
  </startup>
</configuration>